{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TEXT_FILE_EXTS = /\\.(txt|json|html|txt|csv)/;\nfunction parseResponse(url, res) {\n    var header = res.header || {};\n    header = Object.keys(header).reduce(function (map, key) {\n        map[key.toLowerCase()] = header[key];\n        return map;\n    }, {});\n    return {\n        ok: ((res.statusCode / 200) | 0) === 1,\n        status: res.statusCode,\n        statusText: res.statusCode,\n        url: url,\n        clone: function () { return parseResponse(url, res); },\n        text: function () {\n            return Promise.resolve(typeof res.data === 'string' ? res.data : JSON.stringify(res.data));\n        },\n        json: function () {\n            if (typeof res.data === 'object')\n                return Promise.resolve(res.data);\n            var json = {};\n            try {\n                json = JSON.parse(res.data);\n            }\n            catch (err) {\n                console.error(err);\n            }\n            return Promise.resolve(json);\n        },\n        arrayBuffer: function () {\n            return Promise.resolve(res.data);\n        },\n        headers: {\n            keys: function () { return Object.keys(header); },\n            entries: function () {\n                var all = [];\n                for (var key in header) {\n                    if (header.hasOwnProperty(key)) {\n                        all.push([key, header[key]]);\n                    }\n                }\n                return all;\n            },\n            get: function (n) { return header[n.toLowerCase()]; },\n            has: function (n) { return n.toLowerCase() in header; }\n        }\n    };\n}\nexports.parseResponse = parseResponse;\nfunction fetchFunc() {\n    // tslint:disable-next-line:no-any\n    return function (url, options) {\n        options = options || {};\n        var dataType = url.match(exports.TEXT_FILE_EXTS) ? 'text' : 'arraybuffer';\n        return new Promise(function (resolve, reject) {\n            wx.request({\n                url: url,\n                method: options.method || 'GET',\n                data: options.body,\n                header: options.headers,\n                dataType: dataType,\n                responseType: dataType,\n                success: function (resp) { return resolve(parseResponse(url, resp)); },\n                fail: function (err) { return reject(err); }\n            });\n        });\n    };\n}\nexports.fetchFunc = fetchFunc;\nfunction setWechatFetch(debug) {\n    if (debug === void 0) { debug = false; }\n    // tslint:disable-next-line:no-any\n    var typedGlobal = global;\n    if (typeof typedGlobal.fetch !== 'function') {\n        if (debug) {\n            console.log('setup global fetch...');\n        }\n        typedGlobal.fetch = fetchFunc();\n    }\n}\nexports.setWechatFetch = setWechatFetch;\n//# sourceMappingURL=index.js.map"]}