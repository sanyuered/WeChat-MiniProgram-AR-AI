/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@tensorflow/tfjs-core")):"function"==typeof define&&define.amd?define(["exports","@tensorflow/tfjs-core"],t):t((e=e||self).tf=e.tf||{},e.tf)}(this,(function(e,t){"use strict";var a,n,r=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e};function s(e,t,a,n){return new(a||(a=Promise))((function(r,s){function o(e){try{i(n.next(e))}catch(e){s(e)}}function p(e){try{i(n.throw(e))}catch(e){s(e)}}function i(e){e.done?r(e.value):new a((function(t){t(e.value)})).then(o,p)}i((n=n.apply(e,t||[])).next())}))}function o(e,t){var a,n,r,s,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return s={next:p(0),throw:p(1),return:p(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function p(s){return function(p){return function(s){if(a)throw new TypeError("Generator is already executing.");for(;o;)try{if(a=1,n&&(r=n[2&s[0]?"return":s[0]?"throw":"next"])&&!(r=r.call(n,s[1])).done)return r;switch(n=0,r&&(s=[0,r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(r=o.trys,(r=r.length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],n=0}finally{a=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,p])}}}!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(a||(a={})),function(e){!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(n||(n={}));var p={};function i(e){return p[e]}function u(e,a,n,r){var s=a.inputParams[e];if(s&&void 0!==s.inputIndexStart){var o=s.inputIndexStart,p=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?o+1:s.inputIndexEnd;if("tensor"===s.type)return m(a.inputNames[s.inputIndexStart],n,r);if("tensors"===s.type)return a.inputNames.slice(o,p).map((function(e){return m(e,n,r)}));var i=m(a.inputNames.slice(o)[0],n,r),u=i.dataSync();return"number"===s.type?u[0]:t.util.toNestedArray(i.shape,u)}var c=a.attrParams[e];return c&&c.value}function m(e,t,a){var n=y(e),r=n[0],s=n[1],o=a.currentContextIds.find((function(e){return!!t[d(r,e)]}));return void 0!==o?t[d(r,o)][s]:void 0}function c(e,t){var a=y(e),n=a[0],r=a[1];return[d(n,t&&t.currentContextId),r]}function d(e,t){return t?e+"-"+t:e}function y(e){var t=e.split(":");return 1===t.length?[e,0]:[t[0],Number(t[t.length-1])]}function l(e,t,a){var n=u("pad",e,t,a);if("explicit"===n){n=u("explicitPaddings",e,t,a);for(var r=[[0,0],[0,0],[0,0],[0,0]],s=0;s<4;s++)r[s][0]=n[2*s],r[s][1]=n[2*s+1];return r}return n}var f={__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},h={__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},N={__proto__:null,json:[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]},g={__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]},b={__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]},x={__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},T={__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}]},v={__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]},_={__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]},S={__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},O={__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},w={__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]},A={__proto__:null,json:[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]},E={__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]},D={__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]},I={__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]},M=function(){function e(){var e=[f,h,N,g,b,x,T,S,_,v,O,w,A,E,D,I],t=[].concat.apply([],e.map((function(e){return e.json})));this.opMappers=t.reduce((function(e,t){return e[t.tfOpName]=t,e}),{})}return Object.defineProperty(e,"Instance",{get:function(){return this._instance||(this._instance=new this)},enumerable:!0,configurable:!0}),e.prototype.transformGraph=function(e,t){var a=this;void 0===t&&(t={});var n=e.node,r=[],s=[],o=n.reduce((function(e,t){return e[t.name]=a.mapNode(t),t.op.startsWith("Placeholder")&&r.push(e[t.name]),"Const"===t.op&&s.push(e[t.name]),e}),{}),p=[],i=[],u={},m={};null!=t&&(u=this.mapSignatureEntries(t.inputs),m=this.mapSignatureEntries(t.outputs));var d=Object.keys(o);d.forEach((function(e){var t=o[e];t.inputNames.forEach((function(e){var a=c(e)[0];t.inputs.push(o[a]),o[a].children.push(t)}))})),0===Object.keys(m).length?d.forEach((function(e){var t=o[e];0===t.children.length&&i.push(t)})):Object.keys(m).forEach((function(e){var t=c(e)[0],a=o[t];null!=a&&(a.signatureKey=m[e],i.push(a))})),Object.keys(u).length>0?Object.keys(u).forEach((function(e){var t=c(e)[0],a=o[t];a&&(a.signatureKey=u[e],p.push(a))})):p=r;var y={};return null!=e.library&&null!=e.library.function&&(y=e.library.function.reduce((function(e,t){return e[t.signature.name]=a.mapFunction(t),e}),{})),{nodes:o,inputs:p,outputs:i,weights:s,placeholders:r,signature:t,functions:y}},e.prototype.mapSignatureEntries=function(e){return Object.keys(e||{}).reduce((function(t,a){return t[e[a].name]=a,t}),{})},e.prototype.mapNode=function(e){var t=i(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});var a={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((function(e){return e.startsWith("^")?e.substr(1):e})),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(a.inputParams=t.inputs.reduce((function(e,t){return e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e}),{})),null!=t.attrs&&(a.attrParams=t.attrs.reduce((function(t,a){var n=a.type,r=void 0;switch(a.type){case"string":void 0===(r=k(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(r=k(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"string[]":void 0===(r=G(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(r=G(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"number":void 0===(r=L(e.attr,a.tfName,a.defaultValue||0))&&a.tfDeprecatedName&&(r=L(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"number[]":void 0===(r=q(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(r=q(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool":void 0===(r=C(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(r=C(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool[]":void 0===(r=U(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(r=U(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape":void 0===(r=B(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(r=B(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape[]":void 0===(r=W(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(r=W(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype":void 0===(r=P(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(r=P(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype[]":void 0===(r=R(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(r=R(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"func":void 0===(r=z(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(r=z(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error("Unsupported param type: "+a.type+" for op: "+e.op)}return t[a.name]={value:r,type:n},t}),{})),a},e.prototype.mapFunction=function(e){var t=this,a=e.nodeDef,n=[],r={};null!=a&&(r=a.reduce((function(e,a){return e[a.name]=t.mapNode(a),"Const"===a.op&&n.push(e[a.name]),e}),{}));var s=[],o=[];e.signature.inputArg.forEach((function(e){var t=c(e.name)[0],a={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:F(e.type),type:"dtype"}},children:[]};a.signatureKey=e.name,s.push(a),r[t]=a})),Object.keys(r).forEach((function(e){var t=r[e];t.inputNames.forEach((function(e){var a=c(e)[0];t.inputs.push(r[a]),r[a].children.push(t)}))}));var p=e.ret;e.signature.outputArg.forEach((function(e){var t=c(p[e.name]),a=t[0],n=t[1],s=r[a];null!=s&&(s.defaultOutput=n,o.push(s))}));var i=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:o,weights:n,placeholders:[],signature:i}},e.prototype.mapArgsToSignature=function(e){var t=this;return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((function(e,a){return e[a.name]=t.mapArgToTensorInfo(a),e}),{}),outputs:e.signature.outputArg.reduce((function(a,n){return a[n.name]=t.mapArgToTensorInfo(n,e.ret),a}),{})}},e.prototype.mapArgToTensorInfo=function(e,t){var a=e.name;return null!=t&&(a=t[a]),{name:a,dtype:e.type}},e}();function V(e,a){var n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){var a=t.env().global;if(void 0!==a.atob)return a.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return a?n:n.toLowerCase()}function k(e,t,a,n){void 0===n&&(n=!1);var r=e[t];return null!=r?V(r.s,n):a}function C(e,t,a){var n=e[t];return n?n.b:a}function L(e,t,a){var n=e[t]||{},r=null!=n.i?n.i:null!=n.f?n.f:a;return"number"==typeof r?r:parseInt(r,10)}function F(e){switch("string"==typeof e&&(e=a[e]),e){case a.DT_FLOAT:return"float32";case a.DT_INT32:case a.DT_INT64:case a.DT_INT8:case a.DT_UINT8:return"int32";case a.DT_BOOL:return"bool";case a.DT_DOUBLE:return"float32";case a.DT_STRING:return"string";default:return null}}function z(e,t,a){var n=e[t];return n&&n.func?n.func.name:a}function P(e,t,a){var n=e[t];return n&&n.type?F(n.type):a}function R(e,t,a){var n=e[t];return n&&n.list&&n.list.type?n.list.type.map((function(e){return F(e)})):a}function j(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((function(e){return"number"==typeof e.size?e.size:parseInt(e.size,10)})):[]}function B(e,t,a){var n=e[t];return n&&n.shape?j(n.shape):a}function q(e,t,a){var n=e[t];return n?((n.list.f&&n.list.f.length?n.list.f:n.list.i)||[]).map((function(e){return"number"==typeof e?e:parseInt(e,10)})):a}function G(e,t,a,n){void 0===n&&(n=!1);var r=e[t];return r&&r.list&&r.list.s?r.list.s.map((function(e){return V(e,n)})):a}function W(e,t,a){var n=e[t];return n&&n.list&&n.list.shape?n.list.shape.map((function(e){return j(e)})):a}function U(e,t,a){var n=e[t];return n&&n.list&&n.list.b?n.list.b:a}var H=function(){function e(e,t,a){var n=this;this.node=e,this.tensorMap=t,this.context=a,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((function(e){return n.getInput(e)})),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((function(e,t){return e[t]=n.getAttr(t),e}),{}))}return e.prototype.getInput=function(e){return m(e,this.tensorMap,this.context)},e.prototype.getAttr=function(e,t){var a=this.node.rawAttrs[e];if(null!=a.tensor)return m(e,this.tensorMap,this.context);if(null!=a.i||null!=a.f)return L(this.node.rawAttrs,e,t);if(null!=a.s)return k(this.node.rawAttrs,e,t);if(null!=a.b)return C(this.node.rawAttrs,e,t);if(null!=a.shape)return B(this.node.rawAttrs,e,t);if(null!=a.type)return P(this.node.rawAttrs,e,t);if(null!=a.list){if(null!=a.list.i||null!=a.list.f)return q(this.node.rawAttrs,e,t);if(null!=a.list.s)return G(this.node.rawAttrs,e,t);if(null!=a.list.shape)return W(this.node.rawAttrs,e,t);if(null!=a.list.b)return U(this.node.rawAttrs,e,t);if(null!=a.list.type)return R(this.node.rawAttrs,e,t)}return t},e}();function Q(e,a,n){void 0===n&&(n=""),t.util.assert(function(e,t){if(e.length!==t.length)return!1;for(var a=0;a<e.length;a++)if(-1!==e[a]&&-1!==t[a]&&e[a]!==t[a])return!1;return!0}(e,a),(function(){return n+" Shapes "+e+" and "+a+" must match"}))}var K=function(){function e(e,a,n,r,s,o,p){this.name=e,this.dtype=a,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=o,this.clearAfterRead=p,this.tensors=[],this.closed_=!1,this.idTensor=t.scalar(0),t.keep(this.idTensor)}return Object.defineProperty(e.prototype,"id",{get:function(){return this.idTensor.id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"closed",{get:function(){return this.closed_},enumerable:!0,configurable:!0}),e.prototype.clearAndClose=function(){this.tensors.forEach((function(e){return e.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()},e.prototype.size=function(){return this.tensors.length},e.prototype.read=function(e){if(this.closed_)throw new Error("TensorArray "+this.name+" has already been closed.");if(e<0||e>=this.size())throw new Error("Tried to read from index "+e+", but array size is: "+this.size());var t=this.tensors[e];if(t.cleared)throw new Error("TensorArray "+this.name+": Could not read index "+e+" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).");return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor},e.prototype.readMany=function(e){var t=this;return e.map((function(e){return t.read(e)}))},e.prototype.write=function(e,a){if(this.closed_)throw new Error("TensorArray "+this.name+" has already been closed.");if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error("Tried to write to index "+e+", but array is not resizeable and size is: "+this.maxSize);var n=this.tensors[e]||{};if(a.dtype!==this.dtype)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+e+",\n          because the value dtype is "+a.dtype+", but TensorArray dtype is "+this.dtype+".");if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=a.shape),Q(this.elementShape,a.shape,"TensorArray "+this.name+": Could not write to TensorArray index "+e+"."),n.read)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+e+", because it has already been read.");if(n.written)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+e+", because it has already been written.");n.tensor=a,t.keep(a),n.written=!0,this.tensors[e]=n},e.prototype.writeMany=function(e,t){var a=this;if(e.length!==t.length)throw new Error("TensorArray "+this.name+": could not write multiple tensors,because the index size: "+e.length+" is not the same as tensors size: "+t.length+".");e.forEach((function(e,n){return a.write(e,t[n])}))},e.prototype.gather=function(e,a){if(a&&a!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but gather requested dtype "+a);if(e)e=e.slice(0,this.size());else{e=[];for(var n=0;n<this.size();n++)e.push(n)}if(0===e.length)return t.tensor([],[0].concat(this.elementShape));var r=this.readMany(e);return Q(this.elementShape,r[0].shape,"TensorArray shape mismatch: "),t.stack(r,0)},e.prototype.concat=function(e){if(e&&e!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but concat requested dtype "+e);if(0===this.size())return t.tensor([],[0].concat(this.elementShape));for(var a=[],n=0;n<this.size();n++)a.push(n);var r=this.readMany(a);return Q(this.elementShape,r[0].shape,"TensorArray shape mismatch: tensor array shape ("+this.elementShape+") vs first tensor shape ("+r[0].shape+")"),t.concat(r,0)},e.prototype.scatter=function(e,a){if(a.dtype!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+a.dtype);if(e.length!==a.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: "+e.length+" vs. "+a.shape[0]);var n=Math.max.apply(Math,e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error("Max index must be < array size ("+n+"  vs. "+this.maxSize+")");this.writeMany(e,t.unstack(a,0))},e.prototype.split=function(e,a){var n=this;if(a.dtype!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+a.dtype);var r=0,s=e.map((function(e){return r+=e}));if(r!==a.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        "+r+", and tensor's shape is: "+a.shape);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error("TensorArray's size is not equal to the size of lengths ("+this.maxSize+" vs. "+e.length+"), and the TensorArray is not marked as dynamically resizeable");var o=0===r?0:a.size/r,p=[];t.tidy((function(){a=a.reshape([1,r,o]);for(var i=0;i<e.length;++i){var u=[0,0===i?0:s[i-1],0],m=[1,e[i],o];p[i]=t.slice(a,u,m).reshape(n.elementShape)}return p}));for(var i=[],u=0;u<e.length;u++)i[u]=u;this.writeMany(i,p)},e}(),X=function(){function e(e,a,n,r){void 0===r&&(r=-1),this.tensors=e,this.elementShape=a,this.elementDtype=n,null!=e&&e.forEach((function(e){if(n!==e.dtype)throw new Error("Invalid data types; op elements "+n+", but list elements "+e.dtype);Q(a,e.shape,"TensorList shape mismatch: "),t.keep(e)})),this.idTensor=t.scalar(0),this.maxNumElements=r,t.keep(this.idTensor)}return Object.defineProperty(e.prototype,"id",{get:function(){return this.idTensor.id},enumerable:!0,configurable:!0}),e.prototype.copy=function(){return new e(this.tensors.slice(),this.elementShape,this.elementDtype)},e.prototype.clearAndClose=function(){this.tensors.forEach((function(e){return e.dispose()})),this.tensors.length=0,this.idTensor.dispose()},e.prototype.size=function(){return this.tensors.length},e.prototype.stack=function(e,a,n){var r=this;if(void 0===n&&(n=-1),a!==this.elementDtype)throw new Error("Invalid data types; op elements "+a+", but list elements "+this.elementDtype);if(-1!==n&&this.tensors.length!==n)throw new Error("Operation expected a list with "+n+" elements but got a list with "+this.tensors.length+" elements.");return Q(e,this.elementShape,"TensorList shape mismatch: "),t.tidy((function(){var a=r.tensors.map((function(t){return t.reshape(e)}));return t.stack(a,0)}))},e.prototype.popBack=function(e,t){if(t!==this.elementDtype)throw new Error("Invalid data types; op elements "+t+", but list elements "+this.elementDtype);if(0===this.size())throw new Error("Trying to pop from an empty list.");var a=this.tensors.pop();return Q(a.shape,e,"TensorList shape mismatch: "),a.reshape(e)},e.prototype.pushBack=function(e){if(e.dtype!==this.elementDtype)throw new Error("Invalid data types; op elements "+e.dtype+", but list elements "+this.elementDtype);if(Q(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");t.keep(e),this.tensors.push(e)},e.prototype.resize=function(e){if(e<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+e);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error("TensorListResize input size "+e+" is greater maxNumElement "+this.maxNumElements+".");this.tensors.length=e},e.prototype.getItem=function(e,t,a){if(a!==this.elementDtype)throw new Error("Invalid data types; op elements "+a+", but list elements "+this.elementDtype);if(e<0||e>this.tensors.length)throw new Error("Trying to access element "+e+" in a list with "+this.tensors.length+" elements.");if(null==this.tensors[e])throw new Error("element at index "+e+" is null.");return Q(this.tensors[e].shape,t,"TensorList shape mismatch: "),this.tensors[e]},e.prototype.setItem=function(e,a){if(a.dtype!==this.elementDtype)throw new Error("Invalid data types; op elements "+a.dtype+", but list elements "+this.elementDtype);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error("Trying to set element "+e+" in a list with max "+this.maxNumElements+" elements.");Q(this.elementShape,a.shape,"TensorList shape mismatch: "),t.keep(a),this.tensors[e]=a},e.prototype.gather=function(e,a,n){var r=this;if(a!==this.elementDtype)throw new Error("Invalid data types; op elements "+a+", but list elements "+this.elementDtype);return Q(this.elementShape,n,"TensorList shape mismatch: "),0===(e=e.slice(0,this.size())).length?t.tensor([],[0].concat(this.elementShape)):t.tidy((function(){var a=e.map((function(e){return r.tensors[e].reshape(n)}));return t.stack(a,0)}))},e.prototype.concat=function(e,a){var n=this;if(e&&e!==this.elementDtype)throw new Error("TensorList dtype is "+this.elementDtype+" but concat requested dtype "+e);return Q(this.elementShape,a,"TensorList shape mismatch: "),0===this.size()?t.tensor([],[0].concat(this.elementShape)):t.tidy((function(){var e=n.tensors.map((function(e){return e.reshape(a)}));return t.concat(e,0)}))},e}();var Z=function(e,a,n){return s(void 0,void 0,void 0,(function(){var r,s,p,i,c,d,y,l,f,h,N,g,b,x,T,v,_,S,O,w,A,E,D,I,M,V,k,C,L,F,z,P,R,j,B,q,G,W,U,H,Z,Y,J,$,ee,te,ae,ne,re,se,oe,pe,ie,ue;return o(this,(function(me){switch(me.label){case 0:switch(e.op){case"If":case"StatelessIf":return[3,1];case"While":case"StatelessWhile":return[3,3];case"LoopCond":return[3,9];case"Switch":return[3,10];case"Merge":return[3,12];case"Enter":return[3,13];case"Exit":return[3,14];case"NextIteration":return[3,15];case"TensorArrayV3":return[3,16];case"TensorArrayWriteV3":return[3,17];case"TensorArrayReadV3":return[3,18];case"TensorArrayGatherV3":return[3,19];case"TensorArrayScatterV3":return[3,20];case"TensorArrayConcatV3":return[3,21];case"TensorArraySplitV3":return[3,22];case"TensorArraySizeV3":return[3,23];case"TensorArrayCloseV3":return[3,24];case"TensorListSetItem":return[3,25];case"TensorListGetItem":return[3,26];case"TensorListScatterV2":case"TensorListScatter":return[3,27];case"TensorListReserve":return[3,28];case"TensorListGather":return[3,29];case"TensorListStack":return[3,30];case"TensorListFromTensor":return[3,31];case"TensorListConcat":return[3,32];case"TensorListPushBack":return[3,33];case"TensorListPopBack":return[3,34];case"TensorListSplit":return[3,35]}return[3,36];case 1:return r=u("thenBranch",e,a,n),s=u("elseBranch",e,a,n),p=u("cond",e,a,n),d=u("args",e,a,n),[4,p.data()];case 2:return(f=me.sent())[0]?[2,n.functionMap[r].executeFunctionAsync(d,n.tensorArrayMap,n.tensorListMap)]:[2,n.functionMap[s].executeFunctionAsync(d,n.tensorArrayMap,n.tensorListMap)];case 3:return i=u("body",e,a,n),c=u("cond",e,a,n),d=u("args",e,a,n),[4,n.functionMap[c].executeFunctionAsync(d,n.tensorArrayMap,n.tensorListMap)];case 4:return y=me.sent(),l=d.map((function(e){return e.id})),[4,y[0].data()];case 5:f=me.sent(),y.forEach((function(e){e.kept||-1!==l.indexOf(e.id)||e.dispose()})),h=d,N=function(){var e,t,a;return o(this,(function(r){switch(r.label){case 0:return e=h,[4,n.functionMap[i].executeFunctionAsync(h,n.tensorArrayMap,n.tensorListMap)];case 1:return h=r.sent(),t=h.map((function(e){return e.id})),e.forEach((function(e){e.kept||-1!==l.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})),[4,n.functionMap[c].executeFunctionAsync(h,n.tensorArrayMap,n.tensorListMap)];case 2:return[4,(a=r.sent())[0].data()];case 3:return f=r.sent(),a.forEach((function(e){e.kept||-1!==l.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})),[2]}}))},me.label=6;case 6:return f[0]?[5,N()]:[3,8];case 7:return me.sent(),[3,6];case 8:return[2,h];case 9:return[2,[u("pred",e,a,n).clone()]];case 10:return g=u("pred",e,a,n),T=u("data",e,a,n),[4,g.data()];case 11:return[2,me.sent()[0]?[void 0,T.clone()]:[T.clone(),void 0]];case 12:return[2,(b=e.inputNames.find((function(e){return void 0!==m(e,a,n)})))?[m(b,a,n).clone()]:void 0];case 13:return x=u("frameName",e,a,n),T=u("tensor",e,a,n),n.enterFrame(x),[2,[T.clone()]];case 14:return $=u("tensor",e,a,n),n.exitFrame(),[2,[$.clone()]];case 15:return v=u("tensor",e,a,n),n.nextIteration(),[2,[v.clone()]];case 16:return _=u("size",e,a,n),S=u("dtype",e,a,n),pe=u("elementShape",e,a,n),O=u("dynamicSize",e,a,n),w=u("clearAfterRead",e,a,n),A=u("identicalElementShapes",e,a,n),E=u("name",e,a,n),D=new K(E,S,_,pe,A,O,w),n.addTensorArray(D),[2,[D.idTensor,t.scalar(1)]];case 17:return I=u("tensorArrayId",e,a,n),G=u("index",e,a,n),ne=u("tensor",e,a,n),(M=n.getTensorArray(I.id)).write(G,ne),[2,[M.idTensor]];case 18:return V=u("tensorArrayId",e,a,n),W=u("index",e,a,n),[2,[n.getTensorArray(V.id).read(W)]];case 19:return Z=u("tensorArrayId",e,a,n),Y=u("indices",e,a,n),k=u("dtype",e,a,n),[2,[n.getTensorArray(Z.id).gather(Y,k)]];case 20:return C=u("tensorArrayId",e,a,n),U=u("indices",e,a,n),H=u("tensor",e,a,n),(L=n.getTensorArray(C.id)).scatter(U,H),[2,[L.idTensor]];case 21:return te=u("tensorArrayId",e,a,n),F=n.getTensorArray(te.id),ae=u("dtype",e,a,n),[2,[F.concat(ae)]];case 22:return z=u("tensorArrayId",e,a,n),oe=u("tensor",e,a,n),ie=u("lengths",e,a,n),(P=n.getTensorArray(z.id)).split(ie,oe),[2,[P.idTensor]];case 23:return R=u("tensorArrayId",e,a,n),j=n.getTensorArray(R.id),[2,[t.scalar(j.size(),"int32")]];case 24:return B=u("tensorArrayId",e,a,n),(q=n.getTensorArray(B.id)).clearAndClose(),[2,[q.idTensor]];case 25:return re=u("tensorListId",e,a,n),G=u("index",e,a,n),ne=u("tensor",e,a,n),(ue=n.getTensorList(re.id)).setItem(G,ne),[2,[ue.idTensor]];case 26:return re=u("tensorListId",e,a,n),W=u("index",e,a,n),pe=u("elementShape",e,a,n),se=u("elementDType",e,a,n),[2,[(ue=n.getTensorList(re.id)).getItem(W,pe,se)]];case 27:return U=u("indices",e,a,n),H=u("tensor",e,a,n),pe=u("elementShape",e,a,n),J=u("numElements",e,a,n),ue=function(e,a,n,r){if(a.length!==e.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: "+a.length+" vs. "+e.shape[0]);var s=Math.max.apply(Math,a);if(null!=r&&-1!==r&&s>=r)throw new Error("Max index must be < array size ("+s+"  vs. "+r+")");var o=new X([],n,e.dtype,r),p=t.unstack(e,0);return a.forEach((function(e,t){o.setItem(e,p[t])})),o}(H,U,pe,J),n.addTensorList(ue),[2,[ue.idTensor]];case 28:return pe=u("elementShape",e,a,n),ee=u("elementDType",e,a,n),J=u("numElements",e,a,n),ue=function(e,t,a){return new X([],e,t,a)}(pe,ee,J),n.addTensorList(ue),[2,[ue.idTensor]];case 29:return Z=u("tensorListId",e,a,n),Y=u("indices",e,a,n),pe=u("elementShape",e,a,n),ee=u("elementDType",e,a,n),[2,[(ue=n.getTensorList(Z.id)).gather(Y,ee,pe)]];case 30:return re=u("tensorListId",e,a,n),pe=u("elementShape",e,a,n),ee=u("elementDType",e,a,n),J=u("numElements",e,a,n),[2,[(ue=n.getTensorList(re.id)).stack(pe,ee,J)]];case 31:return $=u("tensor",e,a,n),pe=u("elementShape",e,a,n),ee=u("elementDType",e,a,n),ue=function(e,t,a){var n=e.dtype;if(e.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+e.shape);if(e.dtype!==a)throw new Error("Invalid data types; op elements "+e.dtype+", but list elements "+a);Q(e.shape.slice(1),t,"TensorList shape mismatch: ");var r=e.unstack();return new X(r,t,n)}($,pe,ee),n.addTensorList(ue),[2,[ue.idTensor]];case 32:return te=u("tensorListId",e,a,n),ue=n.getTensorList(te.id),ae=u("dtype",e,a,n),pe=u("elementShape",e,a,n),[2,[ue.concat(ae,pe)]];case 33:return re=u("tensorListId",e,a,n),ne=u("tensor",e,a,n),(ue=n.getTensorList(re.id)).pushBack(ne),[2,[ue.idTensor]];case 34:return re=u("tensorListId",e,a,n),pe=u("elementShape",e,a,n),se=u("elementDType",e,a,n),[2,[(ue=n.getTensorList(re.id)).popBack(pe,se)]];case 35:return oe=u("tensor",e,a,n),pe=u("elementShape",e,a,n),ie=u("lengths",e,a,n),ue=function(e,a,n){var r=0,s=a.map((function(e){return r+=e}));if(r!==e.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        "+r+", and tensor's shape is: "+e.shape);for(var o=0===r?0:e.size/r,p=t.tidy((function(){var p=[];e=e.reshape([1,r,o]);for(var i=0;i<a.length;++i){var u=[0,0===i?0:s[i-1],0],m=[1,a[i],o];p[i]=t.slice(e,u,m).reshape(n)}return e.dispose(),p})),i=new X([],n,e.dtype,a.length),u=0;u<p.length;u++)i.setItem(u,p[u]);return i}(oe,ie,pe),n.addTensorList(ue),[2,[ue.idTensor]];case 36:throw TypeError("Node type "+e.op+" is not implemented")}}))}))};function Y(e,a,n){var r=function(e,a,n){switch(e.category){case"arithmetic":return t.tidy((function(){return function(e,a,n){switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[t.add(u("a",e,a,n),u("b",e,a,n))];case"AddN":return[t.addN(u("tensors",e,a,n))];case"FloorMod":case"Mod":return[t.mod(u("a",e,a,n),u("b",e,a,n))];case"Mul":return[t.mul(u("a",e,a,n),u("b",e,a,n))];case"RealDiv":case"Div":return[t.div(u("a",e,a,n),u("b",e,a,n))];case"DivNoNan":return[t.divNoNan(u("a",e,a,n),u("b",e,a,n))];case"FloorDiv":return[t.floorDiv(u("a",e,a,n),u("b",e,a,n))];case"Sub":return[t.sub(u("a",e,a,n),u("b",e,a,n))];case"Minimum":return[t.minimum(u("a",e,a,n),u("b",e,a,n))];case"Maximum":return[t.maximum(u("a",e,a,n),u("b",e,a,n))];case"Pow":return[t.pow(u("a",e,a,n),u("b",e,a,n))];case"SquaredDifference":return[t.squaredDifference(u("a",e,a,n),u("b",e,a,n))];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"basic_math":return t.tidy((function(){return function(e,a,n){switch(e.op){case"Abs":case"ComplexAbs":return[t.abs(u("x",e,a,n))];case"Acos":return[t.acos(u("x",e,a,n))];case"Acosh":return[t.acosh(u("x",e,a,n))];case"Asin":return[t.asin(u("x",e,a,n))];case"Asinh":return[t.asinh(u("x",e,a,n))];case"Atan":return[t.atan(u("x",e,a,n))];case"Atan2":return[t.atan2(u("x",e,a,n),u("y",e,a,n))];case"Atanh":return[t.atanh(u("x",e,a,n))];case"Ceil":return[t.ceil(u("x",e,a,n))];case"Complex":return[t.complex(u("real",e,a,n),u("imag",e,a,n))];case"Cos":return[t.cos(u("x",e,a,n))];case"Cosh":return[t.cosh(u("x",e,a,n))];case"Elu":return[t.elu(u("x",e,a,n))];case"Erf":return[t.erf(u("x",e,a,n))];case"Exp":return[t.exp(u("x",e,a,n))];case"Expm1":return[t.expm1(u("x",e,a,n))];case"Floor":return[t.floor(u("x",e,a,n))];case"Log":return[t.log(u("x",e,a,n))];case"Log1p":return[t.log1p(u("x",e,a,n))];case"Imag":return[t.imag(u("x",e,a,n))];case"Neg":return[t.neg(u("x",e,a,n))];case"Reciprocal":return[t.reciprocal(u("x",e,a,n))];case"Real":return[t.real(u("x",e,a,n))];case"Relu":return[t.relu(u("x",e,a,n))];case"Round":return[t.round(u("x",e,a,n))];case"Selu":return[t.selu(u("x",e,a,n))];case"Sigmoid":return[t.sigmoid(u("x",e,a,n))];case"Sin":return[t.sin(u("x",e,a,n))];case"Sign":return[t.sign(u("x",e,a,n))];case"Sinh":return[t.sinh(u("x",e,a,n))];case"Softplus":return[t.softplus(u("x",e,a,n))];case"Sqrt":return[t.sqrt(u("x",e,a,n))];case"Square":return[t.square(u("x",e,a,n))];case"Tanh":return[t.tanh(u("x",e,a,n))];case"Tan":return[t.tan(u("x",e,a,n))];case"Relu6":case"ClipByValue":return[t.clipByValue(u("x",e,a,n),u("clipValueMin",e,a,n),u("clipValueMax",e,a,n))];case"Rsqrt":return[t.rsqrt(m(e.inputNames[0],a,n))];case"Prod":return[t.prod(u("x",e,a,n),u("axes",e,a,n))];case"LeakyRelu":return[t.leakyRelu(u("x",e,a,n),u("alpha",e,a,n))];case"Prelu":return[t.prelu(u("x",e,a,n),u("alpha",e,a,n))];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"control":return Z(e,a,n);case"convolution":return t.tidy((function(){return function(e,a,n){switch(e.op){case"Conv1D":var r=u("stride",e,a,n),s=u("pad",e,a,n),o=u("dataFormat",e,a,n).toUpperCase(),p=u("dilation",e,a,n);return[t.conv1d(u("x",e,a,n),u("filter",e,a,n),r,s,o,p)];case"Conv2D":r=u("strides",e,a,n),s=l(e,a,n),o=u("dataFormat",e,a,n).toUpperCase();var i=u("dilations",e,a,n);return[t.conv2d(u("x",e,a,n),u("filter",e,a,n),[r[1],r[2]],s,o,[i[1],i[2]])];case"_FusedConv2D":case"FusedDepthwiseConv2dNative":var m=u("fusedOps",e,a,n),c=m[0],d=m[1],y="biasadd"===c,f="prelu"===d,h="fusedbatchnorm"===c,N=u("numArgs",e,a,n);if(y){if(f&&2!==N)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!f&&1!==N)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(h)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");r=u("strides",e,a,n),s=l(e,a,n),o=u("dataFormat",e,a,n).toUpperCase(),i=u("dilations",e,a,n);var g=u("args",e,a,n),b=g[0],x=g[1];return[("_FusedConv2D"===e.op?t.fused.conv2d:t.fused.depthwiseConv2d)({x:u("x",e,a,n),filter:u("filter",e,a,n),strides:[r[1],r[2]],pad:s,dataFormat:o,dilations:[i[1],i[2]],bias:b,activation:d,preluActivationWeights:x})];case"Conv2DBackpropInput":case"Conv2dTranspose":var T=u("outputShape",e,a,n);r=u("strides",e,a,n),s=l(e,a,n);return[t.conv2dTranspose(u("x",e,a,n),u("filter",e,a,n),T,[r[1],r[2]],s)];case"DepthwiseConv2dNative":case"DepthwiseConv2d":r=u("strides",e,a,n),s=l(e,a,n),i=u("dilations",e,a,n),o=u("dataFormat",e,a,n).toUpperCase();return[t.depthwiseConv2d(u("input",e,a,n),u("filter",e,a,n),[r[1],r[2]],s,o,[i[1],i[2]])];case"Conv3D":r=u("strides",e,a,n),s=u("pad",e,a,n),o=u("dataFormat",e,a,n).toUpperCase(),i=u("dilations",e,a,n);return[t.conv3d(u("x",e,a,n),u("filter",e,a,n),[r[1],r[2],r[3]],s,o,[i[1],i[2],i[3]])];case"AvgPool":r=u("strides",e,a,n),s=u("pad",e,a,n);var v=u("kernelSize",e,a,n);return[t.avgPool(u("x",e,a,n),[v[1],v[2]],[r[1],r[2]],s)];case"MaxPool":r=u("strides",e,a,n),s=u("pad",e,a,n),v=u("kernelSize",e,a,n);return[t.maxPool(u("x",e,a,n),[v[1],v[2]],[r[1],r[2]],s)];case"MaxPoolWithArgmax":r=u("strides",e,a,n),s=u("pad",e,a,n),v=u("kernelSize",e,a,n);var _=u("includeBatchInIndex",e,a,n),S=t.maxPoolWithArgmax(u("x",e,a,n),[v[1],v[2]],[r[1],r[2]],s,_);return[S.result,S.indexes];case"AvgPool3D":r=u("strides",e,a,n),s=u("pad",e,a,n),v=u("kernelSize",e,a,n);return[t.avgPool3d(u("x",e,a,n),[v[1],v[2],v[3]],[r[1],r[2],r[3]],s)];case"MaxPool3D":r=u("strides",e,a,n),s=u("pad",e,a,n),v=u("kernelSize",e,a,n);return[t.maxPool3d(u("x",e,a,n),[v[1],v[2],v[3]],[r[1],r[2],r[3]],s)];case"Dilation2D":var O=u("strides",e,a,n),w=(s=u("pad",e,a,n),i=u("dilations",e,a,n),O[1]),A=O[2],E=i[1],D=i[2];return[t.dilation2d(u("x",e,a,n),u("filter",e,a,n),[w,A],s,[E,D],"NHWC")];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"creation":return t.tidy((function(){return function(e,a,n){switch(e.op){case"Fill":var r=u("shape",e,a,n),s=u("dtype",e,a,n),o=u("value",e,a,n);return[t.fill(r,o,s)];case"LinSpace":var p=u("start",e,a,n),i=u("stop",e,a,n),m=u("num",e,a,n);return[t.linspace(p,i,m)];case"Multinomial":var c=u("logits",e,a,n),d=u("numSamples",e,a,n),y=u("seed",e,a,n);return[t.multinomial(c,d,y)];case"OneHot":var l=u("indices",e,a,n),f=u("depth",e,a,n),h=u("onValue",e,a,n),N=u("offValue",e,a,n);return[t.oneHot(l,f,h,N)];case"Ones":return[t.ones(u("shape",e,a,n),u("dtype",e,a,n))];case"OnesLike":return[t.onesLike(u("x",e,a,n))];case"RandomUniform":return[t.randomUniform(u("shape",e,a,n),u("minval",e,a,n),u("maxval",e,a,n),u("dtype",e,a,n))];case"Range":p=u("start",e,a,n);var g=u("stop",e,a,n),b=u("step",e,a,n);return[t.range(p,g,b,u("dtype",e,a,n))];case"TruncatedNormal":r=u("shape",e,a,n);var x=u("mean",e,a,n),T=u("stdDev",e,a,n);y=u("seed",e,a,n);return[t.truncatedNormal(r,x,T,u("dtype",e,a,n),y)];case"Zeros":return[t.zeros(u("shape",e,a,n),u("dtype",e,a,n))];case"ZerosLike":return[t.zerosLike(u("x",e,a,n))];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"dynamic":return function(e,a,n){return s(void 0,void 0,void 0,(function(){var r,s,p,i,m,c,d,y,l;return o(this,(function(o){switch(o.label){case 0:switch(e.op){case"NonMaxSuppressionV5":case"NonMaxSuppressionV4":case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":return[3,1];case"Where":return[3,7];case"ListDiff":return[3,9]}return[3,10];case 1:return r=u("boxes",e,a,n),s=u("scores",e,a,n),p=u("maxOutputSize",e,a,n),i=u("iouThreshold",e,a,n),m=u("scoreThreshold",e,a,n),"NonMaxSuppressionV5"!==e.op?[3,3]:(c=u("softNmsSigma",e,a,n),[4,t.image.nonMaxSuppressionWithScoreAsync(r,s,p,i,m,c)]);case 2:return[2,[(l=o.sent()).selectedIndices,l.selectedScores]];case 3:return"NonMaxSuppressionV4"!==e.op?[3,5]:(d=u("padToMaxOutputSize",e,a,n),[4,t.image.nonMaxSuppressionPaddedAsync(r,s,p,i,m,d)]);case 4:return[2,[(l=o.sent()).selectedIndices,l.validOutputs]];case 5:return[4,t.image.nonMaxSuppressionAsync(r,s,p,i,m)];case 6:return[2,[o.sent()]];case 7:return y=u("condition",e,a,n).asType("bool"),[4,t.whereAsync(y)];case 8:return l=[o.sent()],y.dispose(),[2,l];case 9:return[2,t.setdiff1dAsync(u("x",e,a,n),u("y",e,a,n))];case 10:throw TypeError("Node type "+e.op+" is not implemented")}}))}))}(e,a,n);case"evaluation":return t.tidy((function(){return function(e,a,n){switch(e.op){case"TopKV2":var r=u("x",e,a,n),s=u("k",e,a,n),o=u("sorted",e,a,n),p=t.topk(r,s,o);return[p.values,p.indices];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"image":return t.tidy((function(){return function(e,a,n){switch(e.op){case"ResizeBilinear":var r=u("images",e,a,n),s=u("size",e,a,n),o=u("alignCorners",e,a,n);return[t.image.resizeBilinear(r,[s[0],s[1]],o)];case"ResizeNearestNeighbor":r=u("images",e,a,n),s=u("size",e,a,n),o=u("alignCorners",e,a,n);return[t.image.resizeNearestNeighbor(r,[s[0],s[1]],o)];case"CropAndResize":var p=u("image",e,a,n),i=u("boxes",e,a,n),m=u("boxInd",e,a,n),c=u("cropSize",e,a,n),d=u("method",e,a,n),y=u("extrapolationValue",e,a,n);return[t.image.cropAndResize(p,i,m,c,d,y)];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"graph":return t.tidy((function(){return function(e,a,n){switch(e.op){case"Const":return a[e.name];case"PlaceholderWithDefault":var r=u("default",e,a,n);return[m(e.name,a,n)||r];case"Placeholder":return[m(e.name,a,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[u("x",e,a,n).clone()];case"IdentityN":return u("x",e,a,n).map((function(e){return e.clone()}));case"Snapshot":return[u("x",e,a,n).clone()];case"Shape":return[t.tensor1d(u("x",e,a,n).shape,"int32")];case"ShapeN":return u("x",e,a,n).map((function(e){return t.tensor1d(e.shape)}));case"Size":return[t.scalar(u("x",e,a,n).size,"int32")];case"Rank":return[t.scalar(u("x",e,a,n).rank,"int32")];case"NoOp":return[t.scalar(1)];case"Print":var s=u("x",e,a,n),o=u("data",e,a,n),p=u("message",e,a,n),i=u("summarize",e,a,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(p);for(var c=0;c<o.length;c++)console.log(Array.prototype.slice.call(o[c].dataSync()).slice(0,i));return[s];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"logical":return t.tidy((function(){return function(e,a,n){switch(e.op){case"Equal":return[t.equal(u("a",e,a,n),u("b",e,a,n))];case"NotEqual":return[t.notEqual(u("a",e,a,n),u("b",e,a,n))];case"Greater":return[t.greater(u("a",e,a,n),u("b",e,a,n))];case"GreaterEqual":return[t.greaterEqual(u("a",e,a,n),u("b",e,a,n))];case"Less":return[t.less(u("a",e,a,n),u("b",e,a,n))];case"LessEqual":return[t.lessEqual(u("a",e,a,n),u("b",e,a,n))];case"LogicalAnd":return[t.logicalAnd(u("a",e,a,n),u("b",e,a,n))];case"LogicalNot":return[t.logicalNot(u("a",e,a,n))];case"LogicalOr":return[t.logicalOr(u("a",e,a,n),u("b",e,a,n))];case"Select":case"SelectV2":return[t.where(u("condition",e,a,n),u("a",e,a,n),u("b",e,a,n))];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"matrices":return t.tidy((function(){return function(e,a,n){switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[t.matMul(u("a",e,a,n),u("b",e,a,n),u("transposeA",e,a,n),u("transposeB",e,a,n))];case"Transpose":return[t.transpose(u("x",e,a,n),u("perm",e,a,n))];case"_FusedMatMul":var r=u("fusedOps",e,a,n),s=r[0],o=r[1],p="biasadd"===s,i="prelu"===o,m=u("numArgs",e,a,n);if(p){if(i&&2!==m)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==m)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}var c=u("args",e,a,n),d=c[0],y=c[1];return[t.fused.matMul({a:u("a",e,a,n),b:u("b",e,a,n),transposeA:u("transposeA",e,a,n),transposeB:u("transposeB",e,a,n),bias:d,activation:o,preluActivationWeights:y})];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"normalization":return t.tidy((function(){return function(e,a,n){switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[t.batchNorm(u("x",e,a,n),u("mean",e,a,n),u("variance",e,a,n),u("offset",e,a,n),u("scale",e,a,n),u("epsilon",e,a,n))];case"LRN":return[t.localResponseNormalization(u("x",e,a,n),u("radius",e,a,n),u("bias",e,a,n),u("alpha",e,a,n),u("beta",e,a,n))];case"Softmax":return[t.softmax(u("x",e,a,n))];case"LogSoftmax":return[t.logSoftmax(u("x",e,a,n))];case"SparseToDense":return[t.sparseToDense(u("sparseIndices",e,a,n),u("outputShape",e,a,n),u("sparseValues",e,a,n),u("defaultValue",e,a,n))];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"reduction":return t.tidy((function(){return function(e,a,n){switch(e.op){case"Max":var r=u("axis",e,a,n),s=u("keepDims",e,a,n);return[t.max(u("x",e,a,n),r,s)];case"Mean":r=u("axis",e,a,n),s=u("keepDims",e,a,n);return[t.mean(u("x",e,a,n),r,s)];case"Min":r=u("axis",e,a,n),s=u("keepDims",e,a,n);return[t.min(u("x",e,a,n),r,s)];case"Sum":r=u("axis",e,a,n),s=u("keepDims",e,a,n);return[t.sum(u("x",e,a,n),r,s)];case"All":r=u("axis",e,a,n),s=u("keepDims",e,a,n);return[t.all(u("x",e,a,n),r,s)];case"Any":r=u("axis",e,a,n),s=u("keepDims",e,a,n);return[t.any(u("x",e,a,n),r,s)];case"ArgMax":r=u("axis",e,a,n);return[t.argMax(u("x",e,a,n),r)];case"ArgMin":r=u("axis",e,a,n);return[t.argMin(u("x",e,a,n),r)];case"Prod":r=u("axis",e,a,n),s=u("keepDims",e,a,n);return[t.prod(u("x",e,a,n),r,s)];case"Cumsum":r=u("axis",e,a,n);var o=u("exclusive",e,a,n),p=u("reverse",e,a,n);return[t.cumsum(u("x",e,a,n),r,o,p)];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"slice_join":return t.tidy((function(){return function(e,a,n){switch(e.op){case"ConcatV2":case"Concat":var r=u("n",e,a,n),s=u("axis",e,a,n),o=u("tensors",e,a,n);return o=o.slice(0,r),[t.concat(o,s)];case"GatherV2":case"Gather":s=u("axis",e,a,n);var p=u("x",e,a,n),i=u("indices",e,a,n);return[t.gather(p,i.asType("int32"),s)];case"ReverseV2":case"Reverse":s=u("axis",e,a,n),p=u("x",e,a,n);return[t.reverse(p,s)];case"Slice":var m=u("begin",e,a,n),c=u("size",e,a,n);return[t.slice(u("x",e,a,n),m,c)];case"StridedSlice":m=u("begin",e,a,n);var d=u("end",e,a,n),y=u("strides",e,a,n),l=u("beginMask",e,a,n),f=u("endMask",e,a,n),h=u("ellipsisMask",e,a,n),N=u("newAxisMask",e,a,n),g=u("shrinkAxisMask",e,a,n),b=u("x",e,a,n);return[t.stridedSlice(b,m,d,y,l,f,h,N,g)];case"Pack":return t.tidy((function(){var r=u("axis",e,a,n),s=u("tensors",e,a,n),o=s[0].shape,p=s[0].squeeze().shape,i=s.map((function(e){var a=t.util.arraysEqual(e.shape,o);if(!a&&!t.util.arraysEqual(e.squeeze().shape,p))throw new Error("the input tensors shape does not match");return a?e:e.reshape(o)}));return[t.stack(i,r)]}));case"Unpack":return t.tidy((function(){var r=u("axis",e,a,n),s=u("tensor",e,a,n);return t.unstack(s,r)}));case"Tile":var x=u("reps",e,a,n);return[t.tile(u("x",e,a,n),x)];case"Split":case"SplitV":s=u("axis",e,a,n);var T=u("numOrSizeSplits",e,a,n);b=u("x",e,a,n);return t.split(b,T,s);case"ScatterNd":i=u("indices",e,a,n);var v=u("values",e,a,n),_=u("shape",e,a,n);return[t.scatterND(i,v,_)];case"GatherNd":var S=u("x",e,a,n);i=u("indices",e,a,n);return[t.gatherND(S,i)];case"SparseToDense":i=u("sparseIndices",e,a,n),_=u("outputShape",e,a,n);var O=u("sparseValues",e,a,n),w=u("defaultValue",e,a,n);return[t.sparseToDense(i,O,_,O.dtype===w.dtype?w:w.asType(O.dtype))];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"spectral":return t.tidy((function(){return function(e,a,n){switch(e.op){case"FFT":return[t.fft(u("x",e,a,n))];case"IFFT":return[t.ifft(u("x",e,a,n))];case"RFFT":return[t.rfft(u("x",e,a,n))];case"IRFFT":return[t.irfft(u("x",e,a,n))];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"transformation":return t.tidy((function(){return function(e,a,n){switch(e.op){case"Cast":return[t.cast(u("x",e,a,n),u("dtype",e,a,n))];case"ExpandDims":var r=u("axis",e,a,n);return[t.expandDims(u("x",e,a,n),r)];case"Squeeze":r=u("axis",e,a,n);return[t.squeeze(u("x",e,a,n),r)];case"Reshape":return[t.reshape(u("x",e,a,n),u("shape",e,a,n))];case"PadV2":case"Pad":return[t.pad(u("x",e,a,n),u("padding",e,a,n),u("constantValue",e,a,n))];case"SpaceToBatchND":var s=u("blockShape",e,a,n),o=u("paddings",e,a,n);return[t.spaceToBatchND(u("x",e,a,n),s,o)];case"BatchToSpaceND":s=u("blockShape",e,a,n);var p=u("crops",e,a,n);return[t.batchToSpaceND(u("x",e,a,n),s,p)];case"DepthToSpace":var i=u("blockSize",e,a,n),m=u("dataFormat",e,a,n).toUpperCase();return[t.depthToSpace(u("x",e,a,n),i,m)];case"BroadcastTo":return[t.broadcastTo(u("x",e,a,n),u("shape",e,a,n))];default:throw TypeError("Node type "+e.op+" is not implemented")}}(e,a,n)}));case"custom":var r=i(e.op);if(r&&r.customExecutor)return r.customExecutor(new H(e,a,n));throw TypeError("Custom op "+e.op+" is not registered.");default:throw TypeError("Unknown op '"+e.op+"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()")}}(e,a,n);return r instanceof Promise?r.then((function(e){return[].concat(e)})):[].concat(r)}var J=function(){function e(e,t,a,n){void 0===e&&(e={}),void 0===t&&(t={}),void 0===a&&(a={}),void 0===n&&(n={}),this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=a,this.functionMap=n,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}return e.prototype.newFrame=function(e,t){return{id:e,frameName:t,iterationId:0}},Object.defineProperty(e.prototype,"currentContext",{get:function(){return this.contexts},set:function(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentContextId",{get:function(){return this._currentContextIds[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentContextIds",{get:function(){return this._currentContextIds},enumerable:!0,configurable:!0}),e.prototype.generateCurrentContextIds=function(){for(var e=[],t=0;t<this.contexts.length-1;t++){var a=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(a))}e.push(""),this._currentContextIds=e},e.prototype.contextIdforContexts=function(e){return e?e.map((function(e){return 0===e.id&&0===e.iterationId?"":e.frameName+"-"+e.iterationId})).join("/"):""},e.prototype.enterFrame=function(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))},e.prototype.exitFrame=function(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()},e.prototype.nextIteration=function(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");this.contexts=this.contexts.slice(),this.lastId++;var e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))},e.prototype.getWeight=function(e){return this.weightMap[e]},e.prototype.addTensorArray=function(e){this.tensorArrayMap[e.id]=e},e.prototype.getTensorArray=function(e){return this.tensorArrayMap[e]},e.prototype.addTensorList=function(e){this.tensorListMap[e.id]=e},e.prototype.getTensorList=function(e){return this.tensorListMap[e]},e.prototype.dispose=function(){for(var e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose();for(var e in this.tensorListMap)this.tensorListMap[e].clearAndClose()},e}();function $(e,t,a){for(var n=new Set,r=[],s=null,o=null,p=new Set,i=Object.keys(e).map((function(e){return y(e)[0]})),u=t.slice();u.length>0;){var m=u.pop();(ae(m)||ne(m))&&null==s&&(o=(s=m).children.map((function(e){return e.name})).filter((function(e){return n.has(e)}))),n.add(m.name),null==a[m.name]&&(-1===i.indexOf(m.name)&&(0!==m.inputs.length?m.inputs.forEach((function(e){p.has(e.name)||(p.add(e.name),u.push(e))})):r.push(m.name)))}return{inputs:e,outputs:t,usedNodes:n,missingInputs:r,dynamicNode:s,syncInputs:o}}var ee=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],te=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"];function ae(e){return ee.indexOf(e.op)>=0}function ne(e){return te.indexOf(e.op)>=0}var re=function(){function e(t,a){var n=this;this.graph=t,this.parent=a,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach((function(a){n._functionExecutorMap[a]=new e(t.functions[a],n)}))}return Object.defineProperty(e.prototype,"weightIds",{get:function(){return this.parent?this.parent.weightIds:this._weightIds},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"functionExecutorMap",{get:function(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"weightMap",{get:function(){return this.parent?this.parent.weightMap:this._weightMap},set:function(e){var t=Object.keys(e).map((function(t){return e[t].map((function(e){return e.id}))}));this._weightIds=[].concat.apply([],t),this._weightMap=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputs",{get:function(){return this._inputs.map((function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"outputs",{get:function(){return this._outputs.map((function(e){return{name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputNodes",{get:function(){return this._inputs.map((function(e){return e.signatureKey||e.name}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"outputNodes",{get:function(){return this._outputs.map((function(e){var t=e.signatureKey||e.name;return e.defaultOutput?t+":"+e.defaultOutput:t}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"functions",{get:function(){var e=this;return Object.keys(this._functions).reduce((function(t,a){return t[a]=e._functions[a].signature,t}),{})},enumerable:!0,configurable:!0}),e.prototype.getCompilationKey=function(e,t){var a=e.map((function(e){return e.name})).sort(),n=t.map((function(e){return e.name})).sort();return a.join(this.SEPERATOR)+"--"+n.join(this.SEPERATOR)},e.prototype.compile=function(e,t){var a=$(e,t,this.weightMap),n=a.missingInputs,r=a.dynamicNode,s=a.syncInputs;if(null!=r)throw new Error("This execution contains the node '"+r.name+"', which has the dynamic op '"+r.op+"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs ["+s+"]");if(n.length>0){var o=t.map((function(e){return e.name})),p=Object.keys(e);throw new Error("Cannot compute the outputs ["+o+"] from the provided inputs ["+p+"]. Missing the following inputs: ["+n+"]")}return function(e,t,a){var n=a.usedNodes,r=a.inputs,s=[];Object.keys(r).map((function(e){return y(e)[0]})).map((function(t){return e.nodes[t]})).forEach((function(e){n.has(e.name)&&s.push(e)})),e.weights.forEach((function(e){n.has(e.name)&&s.push(e)}));for(var o=new Set,p=[];s.length>0;){var i=s.pop();o.add(i.name),t[i.name]||p.push(i),i.children.forEach((function(e){!o.has(e.name)&&n.has(e.name)&&e.inputs.every((function(e){return o.has(e.name)}))&&s.push(e)}))}return p}(this.graph,this.weightMap,a)},e.prototype.execute=function(e,a){var n=this;e=this.mapInputs(e);var s=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),a=this.mapOutputs(a),this.checkOutputs(a);var o=s.map((function(e){return n.graph.nodes[y(e)[0]]})),p=a.map((function(e){return n.graph.nodes[y(e)[0]]})),i=this.getCompilationKey(o,p),u=this.compiledMap.get(i);null==u&&(u=this.compile(e,p),this.compiledMap.set(i,u));var c={},d={};return t.tidy((function(){var t=new J(n.weightMap,c,d,n.functionExecutorMap),s=r({},n.weightMap);Object.keys(e).forEach((function(t){var a=y(t),n=a[0],r=[];r[a[1]]=e[t],s[n]=r}));for(var o=n.getFrozenTensorIds(s),p={},i=0;i<u.length;i++){var l=u[i];if(!s[l.name]){var f=Y(l,s,t);if(f instanceof Promise)throw new Error("The execution of the op '"+l.op+"' returned a promise. Please use model.executeAsync() instead.");s[l.name]=f,n.checkTensorForDisposal(l.name,l,s,t,o,a,p)}}return null==n.parent&&t.dispose(),a.map((function(e){return m(e,s,t)}))}))},e.prototype.getFrozenTensorIds=function(e){var t=[].concat.apply([],Object.keys(e).map((function(t){return e[t]})).map((function(e){return e.map((function(e){return e.id}))})));return new Set(t)},e.prototype.checkTensorForDisposal=function(e,t,a,n,r,s,o){"control"!==t.category&&-1===s.indexOf(e)&&(a[e].forEach((function(e){null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((function(e){if("control"!==e.category){var t=function(e,t,a){return t[d(e,a.currentContextId)]}(e.name,a,n);null!=t&&t.forEach((function(e){if(e&&!r.has(e.id)){var t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}))}})))},e.prototype.executeAsync=function(e,t){return s(this,void 0,void 0,(function(){return o(this,(function(a){return[2,this._executeAsync(e,t)]}))}))},e.prototype._executeAsync=function(e,t,a,n,r){return void 0===a&&(a=!1),void 0===n&&(n={}),void 0===r&&(r={}),s(this,void 0,void 0,(function(){var s,p,i,u,c,d=this;return o(this,(function(o){switch(o.label){case 0:return a||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t)),s=new J(this.weightMap,n,r,this.functionExecutorMap),[4,this.executeWithControlFlow(e,s,t,a)];case 1:return p=o.sent(),i=t.map((function(e){return m(e,p,s)})),u=new Set(i.map((function(e){return e.id}))),c=new Set(Object.keys(e).map((function(t){return e[t].id}))),Object.keys(p).forEach((function(e){p[e].forEach((function(e){!e||e.isDisposed||u.has(e.id)||c.has(e.id)||-1!==d.weightIds.indexOf(e.id)||e.dispose()}))})),null==this.parent&&s.dispose(),[2,i]}}))}))},e.prototype.executeFunctionAsync=function(e,t,a){return s(this,void 0,void 0,(function(){var n,r=this;return o(this,(function(s){return n=e.reduce((function(e,t,a){return e[r.inputs[a].name]=t,e}),{}),[2,this._executeAsync(n,this.outputNodes,!0,t,a)]}))}))},e.prototype.executeWithControlFlow=function(e,t,a,n){return s(this,void 0,void 0,(function(){var s,p,i,u,c,d,l,f,h,N,g,b,x,T,v,_,S=this;return o(this,(function(o){switch(o.label){case 0:s=Object.keys(e),p=s.map((function(e){return S.graph.nodes[y(e)[0]]})),i=a.map((function(e){return S.graph.nodes[y(e)[0]]})),u=$(e,i,this.weightMap),c=u.usedNodes,d=u.missingInputs,l=u.dynamicNode,f=u.syncInputs,h=p.concat(this.graph.weights).map((function(e){return{node:e,contexts:t.currentContext}})),N=r({},this.weightMap),Object.keys(e).forEach((function(t){var a=y(t),n=a[0],r=[];r[a[1]]=e[t],N[n]=r})),g={},b=this.getFrozenTensorIds(N),x={},o.label=1;case 1:return h.length>0?(T=this.processStack(p,h,t,N,x,b,a,g,c),[4,Promise.all(T)]):[3,3];case 2:return o.sent(),[3,1];case 3:if(null!=l||n||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead."),(v=i.filter((function(e){return!ae(e)&&!m(e.name,N,t)})).map((function(e){return e.name}))).length>0)throw _="",null!=l&&(_="Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs ["+f+"]"),new Error("Cannot compute the outputs ["+v+"] from the provided inputs ["+s+"]. Consider providing the following inputs: ["+d+"]. "+_);return[2,N]}}))}))},e.prototype.processStack=function(e,t,a,n,r,s,o,p,i){for(var m=this,d=[],y=function(){var y=t.pop();a.currentContext=y.contexts;var f="";if("Enter"===y.node.op&&u("isConstant",y.node,n,a)&&(f=c(y.node.name,a)[0]),-1===e.indexOf(y.node)){var h=Y(y.node,n,a);f||(f=c(y.node.name,a)[0]);var N=a.currentContext;h instanceof Promise?d.push(h.then((function(e){return n[f]=e,a.currentContext=N,m.checkTensorForDisposal(f,y.node,n,a,s,o,p),m.processChildNodes(y.node,t,a,n,r,i),e}))):(n[f]=h,l.checkTensorForDisposal(f,y.node,n,a,s,o,p),l.processChildNodes(y.node,t,a,n,r,i))}else l.processChildNodes(y.node,t,a,n,r,i)},l=this;t.length>0;)y();return d},e.prototype.processChildNodes=function(e,t,a,n,r,s){e.children.forEach((function(e){var o=c(e.name,a)[0];!r[o]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some((function(e){return!!m(e,n,a)}))&&(r[o]=!0,t.push({contexts:a.currentContext,node:e})):e.inputNames.every((function(e){return!!m(e,n,a)}))&&(r[o]=!0,t.push({contexts:a.currentContext,node:e})))}))},e.prototype.dispose=function(){var e=this;Object.keys(this.weightMap).forEach((function(t){return e.weightMap[t].forEach((function(e){return e.dispose()}))}))},e.prototype.checkInputShapeAndType=function(e){var a=this;Object.keys(e).forEach((function(n){var r=e[n],s=y(n)[0],o=a.graph.nodes[s];if(o.attrParams.shape&&o.attrParams.shape.value){var p=o.attrParams.shape.value,i=p.length===r.shape.length&&r.shape.every((function(e,t){return-1===p[t]||p[t]===e}));t.util.assert(i,(function(){return"The shape of dict['"+o.name+"'] provided in model.execute(dict) must be ["+p+"], but was ["+r.shape+"]"}))}o.attrParams.dtype&&o.attrParams.dtype.value&&t.util.assert(r.dtype===o.attrParams.dtype.value,(function(){return"The dtype of dict['"+o.name+"'] provided in model.execute(dict) must be "+o.attrParams.dtype.value+", but was "+r.dtype}))}))},e.prototype.mapInputs=function(e){var t={};for(var a in e){if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[a])t[this._signature.inputs[a].name]=e[a];else t[a]=e[a]}return t},e.prototype.checkInputs=function(e){var t=this,a=Object.keys(e).filter((function(e){var a=y(e)[0];return null==t.graph.nodes[a]}));if(a.length>0)throw new Error("The dict provided in model.execute(dict) has keys: ["+a+"] that are not part of graph")},e.prototype.mapOutputs=function(e){var t=this;return e.map((function(e){return null!=t._signature&&null!=t._signature.outputs&&null!=t._signature.outputs[e]?t._signature.outputs[e].name:e}),{})},e.prototype.checkOutputs=function(e){var t=this;e.forEach((function(e){var a=y(e)[0];if(!t.graph.nodes[a])throw new Error("The output '"+e+"' is not found in the graph")}))},e}(),se=function(){function e(e,t){void 0===t&&(t={}),this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={})}return Object.defineProperty(e.prototype,"modelVersion",{get:function(){return this.version},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputNodes",{get:function(){return this.executor.inputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"outputNodes",{get:function(){return this.executor.outputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputs",{get:function(){return this.executor.inputs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"outputs",{get:function(){return this.executor.outputs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"weights",{get:function(){return this.executor.weightMap},enumerable:!0,configurable:!0}),e.prototype.findIOHandler=function(){var e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=t.io.browserHTTPRequest(e,this.loadOptions);else{var a=t.io.getLoadHandlers(e,this.loadOptions);if(0===a.length)a.push(t.io.browserHTTPRequest(e,this.loadOptions));else if(a.length>1)throw new Error("Found more than one ("+a.length+") load handlers for URL '"+[e]+"'");this.handler=a[0]}},e.prototype.load=function(){return s(this,void 0,void 0,(function(){var e;return o(this,(function(t){switch(t.label){case 0:if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");return[4,this.handler.load()];case 1:return e=t.sent(),[2,this.loadSync(e)]}}))}))},e.prototype.loadSync=function(e){this.artifacts=e;var a=this.artifacts.modelTopology,n={};null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature),this.version=a.versions.producer+"."+a.versions.minConsumer;var r=t.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);return this.executor=new re(M.Instance.transformGraph(a,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),!0},e.prototype.save=function(e,a){return s(this,void 0,void 0,(function(){var a;return o(this,(function(n){if("string"==typeof e){if(0===(a=t.io.getSaveHandlers(e)).length)throw new Error("Cannot find any save handlers for URL '"+e+"'");if(a.length>1)throw new Error("Found more than one ("+a.length+") save handlers for URL '"+e+"'");e=a[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return[2,e.save(this.artifacts)]}))}))},e.prototype.predict=function(e,t){return this.execute(e,this.outputNodes)},e.prototype.normalizeInputs=function(e){if(!(e instanceof t.Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error("Input tensor count mismatch,the graph model has "+this.inputNodes.length+" placeholders, while there are "+e.length+" input tensors.");return this.inputNodes.reduce((function(t,a,n){return t[a]=e[n],t}),{})},e.prototype.normalizeOutputs=function(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]},e.prototype.execute=function(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);var a=this.executor.execute(e,t);return a.length>1?a:a[0]},e.prototype.executeAsync=function(e,t){return s(this,void 0,void 0,(function(){var a;return o(this,(function(n){switch(n.label){case 0:return e=this.normalizeInputs(e),t=this.normalizeOutputs(t),[4,this.executor.executeAsync(e,t)];case 1:return[2,(a=n.sent()).length>1?a:a[0]]}}))}))},e.prototype.convertTensorMapToTensorsMap=function(e){return Object.keys(e).reduce((function(t,a){return t[a]=[e[a]],t}),{})},e.prototype.dispose=function(){this.executor.dispose()},e}();e.GraphModel=se,e.deregisterOp=function(e){delete p[e]},e.loadGraphModel=function(e,t){return void 0===t&&(t={}),s(this,void 0,void 0,(function(){var a;return o(this,(function(n){switch(n.label){case 0:if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");return null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e+="model.json?tfjs-format=file"),[4,(a=new se(e,t)).load()];case 1:return n.sent(),[2,a]}}))}))},e.registerOp=function(e,t){var a={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};p[e]=a},e.version_converter="2.1.0",Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=tf-converter.min.js.map
