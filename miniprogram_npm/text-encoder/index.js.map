{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var utf8Encodings = [\n  'utf8',\n  'utf-8',\n  'unicode-1-1-utf-8'\n];\n\nfunction TextEncoder(encoding) {\n  if (utf8Encodings.indexOf(encoding) < 0 && typeof encoding !== 'undefined' && encoding != null) {\n    throw new RangeError('Invalid encoding type. Only utf-8 is supported');\n  } else {\n    this.encoding = 'utf-8';\n    this.encode = function(str) {\n      if (typeof str !== 'string') {\n        throw new TypeError('passed argument must be of tye string');\n      }\n      var binstr = unescape(encodeURIComponent(str)),\n        arr = new Uint8Array(binstr.length);\n      const split = binstr.split('');\n      for (let i = 0; i < split.length; i++) {\n        arr[i] = split[i].charCodeAt(0);\n      }\n      return arr;\n    };\n  }\n}\n\nfunction TextDecoder(encoding) {\n  if (utf8Encodings.indexOf(encoding) < 0 && typeof encoding !== 'undefined' && encoding != null) {\n    throw new RangeError('Invalid encoding type. Only utf-8 is supported');\n  }\n  else {\n    this.encoding = 'utf-8';\n    this.decode = function (view, options) {\n      if (typeof view === 'undefined') {\n        return '';\n      }\n\n      var stream = (typeof options !== 'undefined' && stream in options) ? options.stream : false;\n      if (typeof stream !== 'boolean') {\n        throw new TypeError('stream option must be boolean');\n      }\n\n      if (!ArrayBuffer.isView(view)) {\n        throw new TypeError('passed argument must be an array buffer view');\n      } else {\n        var arr = new Uint8Array(view.buffer, view.byteOffset, view.byteLength),\n          charArr = new Array(arr.length);\n        for (let i = 0; i < arr.length; i++) {\n          charArr[i] = String.fromCharCode(arr[i]);\n        }\n        return decodeURIComponent(escape(charArr.join('')));\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  TextEncoder,\n  TextDecoder,\n};\n"]}